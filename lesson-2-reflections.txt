What happens when you initialize a repository? Why do you need to do it?

  there'll be a file .git to be created, I think the reason is initialize the environment and firgure out the last commits if there is.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

  staging area can store current changes and you can decide wether or not to make commit, it will be in repository when you commit, and there will be an update version in the working directory.
  It will not cause too many versions in repository as you can decide when to make commit, but also only change the files in working derectory after you stored it.

How can you use the staging area to make sure you have one commit per logical
change?
 
  when you made some changes, you can use git diff --staged to check if it is a logical change, yes then commit once.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  when you want to have different versions to be kept and don't like to make it as old commits. if you want to check the specified version, you can go to the branch directly and check out all version instead of in master branch with too many mixing info.

How do the diagrams help you visualize the branch structure?

  you can view all the branches and all versions changed in each branch, and fetch the one you need quickly.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
